{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","helper.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["REMOVE","SET","actions","todo","type","payload","currentTodoReducer","state","action","UPDATE","RESET","CHANGE","newQuery","status","initialState","query","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","storeTodos","dispatch","filteredTodos","filterObject","statusFilteredTodos","completed","filterTodosByStatus","queryToLower","toLowerCase","title","includes","filterTodosByQuery","filterTodos","length","className","map","id","isSelected","cn","onClick","currentTodoActions","selectCurrentTodo","far","TodoFilter","onSubmit","event","preventDefault","onChange","e","selectValue","target","value","filterActions","placeholder","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","fetchUser","useCallback","a","userId","userFromServer","useEffect","href","email","name","App","fetchTodos","data","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"oOAEMA,EAAS,qBACTC,EAAM,kBAgBCC,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAMH,EACNI,QAASF,IAGED,EAPM,iBAAyB,CAAEE,KAAMJ,IA4BrCM,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,KAAKH,EACH,OAAOO,EAAOH,QAEhB,KAAKL,EACH,OAAO,KAET,QACE,OAAOO,I,OClCPE,EAAS,eACTC,EAAQ,cACRC,EAAS,gBAgBFT,EAVO,SAACU,GACnB,MAAO,CAAER,KAAMK,EAAQJ,QAASO,IASrBV,EAFM,iBAAyB,CAAEE,KAAMM,IAEvCR,EANQ,SAACW,GACpB,MAAO,CAAET,KAAMO,EAAQN,QAASQ,IAU5BC,EAAsB,CAC1BC,MAAO,GACPF,OAAQ,OAmBKG,EAhBO,WAGT,IAFXT,EAEU,uDAFFO,EACRN,EACU,uCACV,OAAQA,EAAOJ,MACb,KAAKM,EACH,OAAO,2BAAKH,GAAZ,IAAmBQ,MAAO,KAC5B,KAAKN,EACH,OAAO,2BAAKF,GAAZ,IAAmBQ,MAAOP,EAAOH,UACnC,KAAKM,EACH,OAAO,2BAAKJ,GAAZ,IAAmBM,OAAQL,EAAOH,UACpC,QACE,OAAOE,I,QCxCPN,EAAM,YAYCC,EALI,SAACC,GAAD,MAAmC,CAClDC,KAAMH,EACNI,QAASF,IAqBIc,EAbM,WAGR,IAFXH,EAEU,uDAFY,KACtBN,EACU,uCACV,OAAQA,EAAOJ,OACRH,EACI,YAAIO,EAAOH,SAGXS,GCpBPI,EAAcC,0BAAgB,CAClCC,YAAad,EACbe,OAAQL,EACRM,MAAOL,IAIIM,EAAQC,sBACnBN,EACAO,8BACEC,0BAAgBC,O,8DCfPC,EAAoCC,IACpCC,EAAkDC,I,OCIlDC,EAAqB,WAChC,IAAMC,EAAaH,GAAe,SAAAvB,GAAK,OAAIA,EAAMe,SAC3CF,EAAcU,GAAe,SAAAvB,GAAK,OAAIA,EAAMa,eAC5CC,EAASS,GAAe,SAAAvB,GAAK,OAAIA,EAAMc,UACvCa,EAAWN,IAYXO,EAAgBF,EAVF,SAACX,EAAec,GAClC,IAAMC,ECZyB,SAACf,EAAeT,GACjD,OAAQA,GACN,IAAK,MAML,QACE,OAAOS,EALT,IAAK,SACH,OAAOA,EAAMD,QAAO,SAAAlB,GAAI,OAAuB,IAAnBA,EAAKmC,aACnC,IAAK,YACH,OAAOhB,EAAMD,QAAO,SAAAlB,GAAI,OAAuB,IAAnBA,EAAKmC,cDKPC,CAAoBjB,EAAOc,EAAavB,QAEpE,OCD8B,SAACS,EAAeP,GAChD,IAAMyB,EAAezB,EAAM0B,cAE3B,OAAOnB,EAAMD,QAAO,qBAAGqB,MACfD,cAAcE,SAASH,MDHtBI,CAAmBP,EAAqBD,EAAarB,OAO3B8B,CAAYZ,EAAYZ,GAAU,GAErE,OACE,mCACGc,EAAcW,OACb,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGZ,EAAca,KAAI,SAAA7C,GACjB,IAAQ8C,EAAyB9C,EAAzB8C,GAAIX,EAAqBnC,EAArBmC,UAAWI,EAAUvC,EAAVuC,MACjBQ,GAAwB,OAAX9B,QAAW,IAAXA,OAAA,EAAAA,EAAa6B,MAAOA,EAEvC,OACE,qBAEE,UAAQ,OACRF,UAAWI,IAAG,CACZ,4BAA6BD,IAJjC,UAOE,oBAAIH,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGT,GACC,sBAAMS,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWI,IAAG,CACZ,mBAAoBb,EACpB,mBAAoBA,IAHxB,SAMGI,MAGL,oBAAIK,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV3C,KAAK,SACLgD,QAAS,kBA7DH,SAACjD,GACzB+B,EAASmB,EAA2BlD,IA4DHmD,CAAkBnD,IAJnC,SAME,sBAAM4C,UAAU,OAAhB,SACE,mBACEA,UAAWI,IAAG,CACZI,KAAK,EACL,eAAgBL,EAChB,UAAWA,cApChBD,WAgDf,mBAAGF,UAAU,0BAAb,oEE/FKS,EAAuB,WAClC,IAAMtB,EAAWN,IACXP,EAASS,GAAe,SAAAvB,GAAK,OAAIA,EAAMc,UAgB7C,OACE,uBACE0B,UAAU,mBACVU,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGZ,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRa,SAfiB,SAACC,GAC1B,IAAMC,EAAcD,EAAEE,OAAOC,MAE7B9B,EAAS+B,EAA2BH,KAU9B,UAIE,wBAAQE,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGjB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR3C,KAAK,OACL2C,UAAU,QACVmB,YAAY,YACZF,MAAO3C,EAAON,MACd6C,SAvCkB,SAACC,GACzB3B,EAAS+B,EAA0BJ,EAAEE,OAAOC,WAwCxC,sBAAMjB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGd1B,EAAON,OACN,sBAAMgC,UAAU,gBAAhB,SAEE,wBACE,UAAQ,oBACR3C,KAAK,SACL2C,UAAU,SACVK,QAhDa,WACvBlB,EAAS+B,iBCFb,SAASE,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,IClBMC,EAAmB,kBAC9B,qBAAK/B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uB,OCENgC,EAAsB,WACjC,IAAM7C,EAAWN,IACXR,EAAcU,GAAe,SAAAvB,GAAK,OAAIA,EAAMa,eAClD,EAAwB4D,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAMMC,EAAYC,sBAAW,sBAAC,4BAAAC,EAAA,0DACxBjE,EADwB,gCFORkE,EELmBlE,EAAYkE,OFKZnB,EAAG,iBAAiBmB,IEP/B,OAEpBC,EAFoB,OAI1BL,EAAQK,GAJkB,iCFOT,IAACD,IEPQ,OAM3B,CAAClE,IAMJ,OAJAoE,qBAAU,WACRL,MACC,IAGD,sBAAKpC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdkC,EACC,sBAAKlC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIY3B,QAJZ,IAIYA,OAJZ,EAIYA,EAAa6B,MAIzB,wBACE7C,KAAK,SACL2C,UAAU,SACV,UAAQ,cACRK,QAnCa,WACvBlB,EAAShC,WAsCH,sBAAK6C,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACG3B,QADH,IACGA,OADH,EACGA,EAAasB,QAGhB,oBAAGK,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAX3B,QAAW,IAAXA,KAAakB,UACZ,wBAAQS,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAED,OACD,mBAAG0C,KAAI,iBAAYR,EAAKS,OAAxB,SACGT,EAAKU,gBAMd,cAAC,EAAD,QCzDKC,EAAgB,WAC3B,IAAM1D,EAAWN,IACXN,EAAQQ,GAAe,SAAAvB,GAAK,OAAIA,EAAMe,SACtCF,EAAcU,GAAe,SAAAvB,GAAK,OAAIA,EAAMa,eAYlD,OAVAoE,qBAAU,WACR,IAAMK,EAAU,uCAAG,4BAAAR,EAAA,sEHEOlB,EAAY,UGFnB,OACX2B,EADW,OAGjB5D,EAAS6D,EAAsBD,IAHd,2CAAH,qDAMhBD,MACC,CAACzE,IAGF,qCACE,qBAAK2B,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,sBAAKA,UAAU,QAAf,UACGzB,GAAS,cAAC,EAAD,KACRA,GAAS,cAAC,EAAD,cAKlBF,GACC,cAAC,EAAD,QCtCF4E,EAAO,kBACX,cAAC,IAAD,CAAUzE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKN0E,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.e50bed03.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nconst REMOVE = 'currentTodo/REMOVE';\nconst SET = 'currentTodo/SET';\n\ntype RemoveTodoAction = { type: typeof REMOVE };\n\ntype SetTodoAction = {\n  type: typeof SET;\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: REMOVE });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: SET,\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case SET:\n      return action.payload;\n\n    case REMOVE:\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nconst UPDATE = 'query/UPDATE';\nconst RESET = 'query/RESET';\nconst CHANGE = 'status/CHANGE';\n\ntype QueryUpdateAction = { type: typeof UPDATE, payload: string };\ntype QueryResetAction = { type: typeof RESET };\ntype StatusChangeAction = { type: typeof CHANGE, payload: Status };\n\nconst updateQuery = (newQuery: string): QueryUpdateAction => {\n  return { type: UPDATE, payload: newQuery };\n};\n\nconst changeStatus = (status: Status): StatusChangeAction => {\n  return { type: CHANGE, payload: status };\n};\n\nconst resetQuery = (): QueryResetAction => ({ type: RESET });\n\nexport const actions = { updateQuery, resetQuery, changeStatus };\n\ntype Action = QueryResetAction | QueryUpdateAction | StatusChangeAction;\nexport type State = { query: string, status: Status };\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case RESET:\n      return { ...state, query: '' };\n    case UPDATE:\n      return { ...state, query: action.payload };\n    case CHANGE:\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nconst SET = 'todos/SET';\n\ntype SetTodosAction = {\n  type: typeof SET,\n  payload: Todo[]\n};\n\nconst setTodos = (todo: Todo[]): SetTodosAction => ({\n  type: SET,\n  payload: todo,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[] | null;\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  initialState: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case SET:\n      return [...action.payload];\n\n    default:\n      return initialState;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { filterTodosByQuery, filterTodosByStatus } from '../../helper';\nimport { State as FilterObject } from '../../features/filter';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const storeTodos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const filterTodos = (todos: Todo[], filterObject: FilterObject) => {\n    const statusFilteredTodos = filterTodosByStatus(todos, filterObject.status);\n\n    return filterTodosByQuery(statusFilteredTodos, filterObject.query);\n  };\n\n  const selectCurrentTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const filteredTodos = storeTodos ? filterTodos(storeTodos, filter) : [];\n\n  return (\n    <>\n      {filteredTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => {\n              const { id, completed, title } = todo;\n              const isSelected = currentTodo?.id === id;\n\n              return (\n                <tr\n                  key={id}\n                  data-cy=\"todo\"\n                  className={cn({\n                    'has-background-info-light': isSelected,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={cn({\n                        'has-text-success': completed,\n                        'has-text-danger': !completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => selectCurrentTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={cn({\n                            far: true,\n                            'fa-eye-slash': isSelected,\n                            'fa-eye': !isSelected,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import { Status } from './types/Status';\nimport { Todo } from './types/Todo';\n\nexport const filterTodosByStatus = (todos: Todo[], status: Status): Todo[] => {\n  switch (status) {\n    case 'all':\n      return todos;\n    case 'active':\n      return todos.filter(todo => todo.completed === false);\n    case 'completed':\n      return todos.filter(todo => todo.completed === true);\n    default:\n      return todos;\n  }\n};\n\nexport const filterTodosByQuery = (todos: Todo[], query: string) => {\n  const queryToLower = query.toLowerCase();\n\n  return todos.filter(({ title }) => (\n    title.toLowerCase().includes(queryToLower)\n  ));\n};\n","import React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter);\n\n  const handleQueryUpdate = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.updateQuery(e.target.value));\n  };\n\n  const handleQueryReset = () => {\n    dispatch(filterActions.resetQuery());\n  };\n\n  const handleStatusChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const selectValue = e.target.value as Status;\n\n    dispatch(filterActions.changeStatus(selectValue));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filter.query}\n          onChange={handleQueryUpdate}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filter.query && (\n          <span className=\"icon is-right\">\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryReset}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  const resetCurrentTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  const fetchUser = useCallback(async () => {\n    if (currentTodo) {\n      const userFromServer = await getUser(currentTodo.userId);\n\n      setUser(userFromServer);\n    }\n  }, [currentTodo]);\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={resetCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { Loader } from './components/Loader';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      const data = await getTodos();\n\n      dispatch(todosActions.setTodos(data));\n    };\n\n    fetchTodos();\n  }, [currentTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos && <TodoList />}\n              {!todos && <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}